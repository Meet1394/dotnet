@model PersonalCloudDrive.Models.FileManagerViewModel
@{
    ViewData["Title"] = "File Manager";
}

<style>
    /* ... (keep all existing styles) ... */

    .context-menu {
        position: fixed;
        background: rgba(30, 41, 59, 0.95);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 0.5rem;
        z-index: 1000;
        backdrop-filter: blur(10px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    }

    .context-menu-item {
        padding: 0.5rem 1rem;
        color: var(--text-primary);
        cursor: pointer;
        border-radius: 4px;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.2s ease;
    }

    .context-menu-item:hover {
        background: rgba(99, 102, 241, 0.1);
    }

    .context-menu-item.danger:hover {
        background: rgba(239, 68, 68, 0.1);
        color: #ef4444;
    }

    /* Preview modal styles */
    .preview-modal .modal-content {
        background: rgba(30, 41, 59, 0.95);
        border: 1px solid var(--border-color);
    }

    .preview-modal .modal-body {
        text-align: center;
        padding: 2rem;
    }

    .preview-modal img {
        max-width: 100%;
        max-height: 70vh;
        border-radius: 8px;
    }

    /* Share modal styles */
    .share-link {
        background: rgba(15, 23, 42, 0.4);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 0.75rem;
        color: var(--text-primary);
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .share-link input {
        background: transparent;
        border: none;
        color: var(--text-primary);
        flex: 1;
    }

    .share-link input:focus {
        outline: none;
    }
</style>

<div class="file-manager">
    <div class="path-nav">
        <a href="/File/Manager" class="nav-link">
            <i class="fas fa-home"></i>
        </a>
        @if (Model.CurrentFolderId.HasValue)
        {
            <span class="path-separator">/</span>
            @foreach (var part in Model.CurrentFolderPath.Split('/').Where(p => !string.IsNullOrEmpty(p)))
            {
                <a href="#" class="nav-link">@part</a>
                <span class="path-separator">/</span>
            }
        }
    </div>

    <div class="action-bar">
        <div>
            <button class="btn btn-primary me-2" onclick="showCreateFolderModal()">
                <i class="fas fa-folder-plus"></i> New Folder
            </button>
            <button class="btn btn-primary" onclick="document.getElementById('fileInput').click()">
                <i class="fas fa-upload"></i> Upload Files
            </button>
            <input type="file" id="fileInput" multiple style="display: none" onchange="handleFileSelect(event)" />
        </div>
        <input type="text" class="search-box" placeholder="Search files..." onkeyup="searchFiles(this.value)" />
    </div>

    <div class="storage-info">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <div>Storage Used</div>
            <div>@Model.StorageUsed.ToString("F2") MB of @Model.StorageLimit MB</div>
        </div>
        <div class="progress">
            <div class="progress-bar" role="progressbar" 
                 style="width: @((Model.StorageUsed / Model.StorageLimit * 100).ToString("F1"))%"></div>
        </div>
    </div>

    @if (Model.Folders.Any())
    {
        <h5 class="mb-3"><i class="fas fa-folder"></i> Folders</h5>
        <div class="folder-grid">
            @foreach (var folder in Model.Folders)
            {
                <div class="folder-item" ondblclick="navigateToFolder(@folder.Id)" oncontextmenu="showFolderActions(event, @folder.Id); return false;">
                    <div class="folder-icon">
                        <i class="fas fa-folder"></i>
                    </div>
                    <div class="item-name">@folder.FolderName</div>
                    <div class="item-meta">Created @folder.CreatedOn.ToString("MMM dd, yyyy")</div>
                </div>
            }
        </div>
    }

    @if (Model.Files.Any())
    {
        <h5 class="mb-3"><i class="fas fa-file"></i> Files</h5>
        <div class="file-grid">
            @foreach (var file in Model.Files)
            {
                <div class="file-item" ondblclick="downloadFile(@file.Id)" oncontextmenu="showFileActions(event, @file.Id); return false;">
                    <div class="file-icon">
                        @{
                            var icon = file.FileType.ToLower() switch
                            {
                                ".pdf" => "fa-file-pdf",
                                ".doc" or ".docx" => "fa-file-word",
                                ".xls" or ".xlsx" => "fa-file-excel",
                                ".jpg" or ".jpeg" or ".png" or ".gif" => "fa-file-image",
                                ".zip" or ".rar" => "fa-file-archive",
                                ".mp4" or ".avi" or ".mov" => "fa-file-video",
                                ".mp3" or ".wav" => "fa-file-audio",
                                _ => "fa-file"
                            };
                        }
                        <i class="fas @icon"></i>
                    </div>
                    <div class="item-name">@file.FileName</div>
                    <div class="item-meta">
                        @((file.FileSize / 1024.0 / 1024.0).ToString("F2")) MB
                    </div>
                </div>
            }
        </div>
    }

    @if (!Model.Files.Any() && !Model.Folders.Any())
    {
        <div class="empty-state">
            <i class="fas fa-folder-open"></i>
            <p>This folder is empty</p>
            <button class="btn btn-primary mt-2" onclick="document.getElementById('fileInput').click()">
                <i class="fas fa-upload"></i> Upload Files
            </button>
        </div>
    }
</div>

<!-- Context Menu -->
<div id="contextMenu" class="context-menu" style="display: none;">
    <div id="contextMenuContent"></div>
</div>

<!-- Create Folder Modal -->
<div class="modal fade" id="createFolderModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content" style="background: rgba(30, 41, 59, 0.95); border: 1px solid var(--border-color);">
            <div class="modal-header border-bottom-0">
                <h5 class="modal-title">Create New Folder</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="text" id="folderName" class="form-control" 
                       style="background: rgba(15, 23, 42, 0.4); border-color: var(--border-color); color: var(--text-primary);" 
                       placeholder="Enter folder name" />
            </div>
            <div class="modal-footer border-top-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createFolder()">Create</button>
            </div>
        </div>
    </div>
</div>

<!-- Share Modal -->
<div class="modal fade" id="shareModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content" style="background: rgba(30, 41, 59, 0.95); border: 1px solid var(--border-color);">
            <div class="modal-header border-bottom-0">
                <h5 class="modal-title">Share File</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="share-link">
                    <input type="text" id="shareLink" readonly />
                    <button class="btn btn-primary btn-sm" onclick="copyShareLink()">
                        <i class="fas fa-copy"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Preview Modal -->
<div class="modal fade preview-modal" id="previewModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header border-bottom-0">
                <h5 class="modal-title">Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <img id="previewImage" src="" alt="Preview" />
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Close context menu when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('#contextMenu')) {
                hideContextMenu();
            }
        });

        function showContextMenu(e, content) {
            const menu = document.getElementById('contextMenu');
            const menuContent = document.getElementById('contextMenuContent');
            menuContent.innerHTML = content;
            
            menu.style.display = 'block';
            
            // Position menu
            const x = e.clientX;
            const y = e.clientY;
            const windowWidth = window.innerWidth;
            const windowHeight = window.innerHeight;
            const menuWidth = menu.offsetWidth;
            const menuHeight = menu.offsetHeight;
            
            menu.style.left = ((x + menuWidth > windowWidth) ? (windowWidth - menuWidth - 10) : x) + 'px';
            menu.style.top = ((y + menuHeight > windowHeight) ? (windowHeight - menuHeight - 10) : y) + 'px';
        }

        function hideContextMenu() {
            document.getElementById('contextMenu').style.display = 'none';
        }

        function showFileActions(e, fileId) {
            const content = `
                <div class="context-menu-item" onclick="downloadFile(${fileId})">
                    <i class="fas fa-download"></i> Download
                </div>
                <div class="context-menu-item" onclick="previewFile(${fileId})">
                    <i class="fas fa-eye"></i> Preview
                </div>
                <div class="context-menu-item" onclick="showShareModal(${fileId})">
                    <i class="fas fa-share-alt"></i> Share
                </div>
                <div class="context-menu-item danger" onclick="deleteFile(${fileId})">
                    <i class="fas fa-trash"></i> Delete
                </div>
            `;
            showContextMenu(e, content);
        }

        function showFolderActions(e, folderId) {
            const content = `
                <div class="context-menu-item" onclick="navigateToFolder(${folderId})">
                    <i class="fas fa-folder-open"></i> Open
                </div>
                <div class="context-menu-item danger" onclick="deleteFolder(${folderId})">
                    <i class="fas fa-trash"></i> Delete
                </div>
            `;
            showContextMenu(e, content);
        }

        function showCreateFolderModal() {
            const modal = new bootstrap.Modal(document.getElementById('createFolderModal'));
            const input = document.getElementById('folderName');
            input.value = '';
            modal.show();
            
            // Focus the input after modal is shown
            document.getElementById('createFolderModal').addEventListener('shown.bs.modal', function () {
                input.focus();
            });

            // Handle enter key
            input.onkeyup = function(e) {
                if (e.key === 'Enter') {
                    createFolder();
                }
            };
        }

        async function createFolder() {
            const folderName = document.getElementById('folderName').value.trim();
            if (!folderName) {
                alert('Please enter a folder name');
                return;
            }

            try {
                const response = await fetch('/File/CreateFolder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        folderName,
                        parentFolderId: @(Model.CurrentFolderId?.ToString() ?? "null")
                    })
                });

                const result = await response.json();
                if (result.success) {
                    bootstrap.Modal.getInstance(document.getElementById('createFolderModal')).hide();
                    location.reload();
                } else {
                    alert(result.message);
                }
            } catch (error) {
                alert('Error creating folder');
            }
        }

        function downloadFile(fileId) {
            hideContextMenu();
            window.location.href = `/File/Download/${fileId}`;
        }

        async function deleteFile(fileId) {
            hideContextMenu();
            if (!confirm('Are you sure you want to delete this file?')) return;

            try {
                const response = await fetch('/File/Delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ fileId })
                });

                const result = await response.json();
                if (result.success) {
                    location.reload();
                } else {
                    alert(result.message);
                }
            } catch (error) {
                alert('Error deleting file');
            }
        }

        async function deleteFolder(folderId) {
            hideContextMenu();
            if (!confirm('Are you sure you want to delete this folder and all its contents?')) return;

            try {
                const response = await fetch('/File/DeleteFolder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ folderId })
                });

                const result = await response.json();
                if (result.success) {
                    location.reload();
                } else {
                    alert(result.message);
                }
            } catch (error) {
                alert('Error deleting folder');
            }
        }

        function showShareModal(fileId) {
            hideContextMenu();
            const shareModal = new bootstrap.Modal(document.getElementById('shareModal'));
            const shareLink = document.getElementById('shareLink');
            shareLink.value = `${window.location.origin}/Share/File/${fileId}`;
            shareModal.show();
        }

        function copyShareLink() {
            const shareLink = document.getElementById('shareLink');
            shareLink.select();
            document.execCommand('copy');
            alert('Link copied to clipboard!');
        }

        function previewFile(fileId) {
            hideContextMenu();
            const previewModal = new bootstrap.Modal(document.getElementById('previewModal'));
            const previewImage = document.getElementById('previewImage');
            previewImage.src = `/File/Preview/${fileId}`;
            previewModal.show();
        }

        async function handleFileSelect(event) {
            const files = event.target.files;
            if (!files.length) return;

            for (const file of files) {
                const formData = new FormData();
                formData.append('file', file);
                formData.append('folderId', @(Model.CurrentFolderId?.ToString() ?? "null"));

                try {
                    const response = await fetch('/File/Upload', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();
                    if (!result.success) {
                        alert(result.message);
                    }
                } catch (error) {
                    alert('Error uploading file');
                }
            }

            location.reload();
        }

        function navigateToFolder(folderId) {
            hideContextMenu();
            window.location.href = `/File/Manager?folderId=${folderId}`;
        }

        let searchTimeout;
        async function searchFiles(query) {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(async () => {
                try {
                    const response = await fetch(`/File/Search?query=${encodeURIComponent(query)}`);
                    const result = await response.json();
                    if (result.success) {
                        // Update UI with search results
                        const fileGrid = document.querySelector('.file-grid');
                        if (!fileGrid) return;

                        fileGrid.innerHTML = result.files.map(file => `
                            <div class="file-item" ondblclick="downloadFile(${file.id})" oncontextmenu="showFileActions(event, ${file.id}); return false;">
                                <div class="file-icon">
                                    <i class="fas fa-file"></i>
                                </div>
                                <div class="item-name">${file.fileName}</div>
                                <div class="item-meta">
                                    ${(file.fileSize / 1024 / 1024).toFixed(2)} MB
                                </div>
                            </div>
                        `).join('');
                    }
                } catch (error) {
                    console.error('Error searching files:', error);
                }
            }, 300);
        }
    </script>
}