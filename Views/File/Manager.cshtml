@model PersonalCloudDrive.Models.FileManagerViewModel
@{
    ViewData["Title"] = "File Manager";
}

<style>
    .file-manager {
        background: rgba(30, 41, 59, 0.6);
        border: 1px solid var(--border-color);
        border-radius: 16px;
        padding: 2rem;
        backdrop-filter: blur(10px);
    }

    .path-nav {
        background: rgba(15, 23, 42, 0.4);
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 2rem;
        display: flex;
        align-items: center;
        overflow-x: auto;
    }

    .path-nav::-webkit-scrollbar {
        height: 4px;
    }

    .path-nav::-webkit-scrollbar-track {
        background: rgba(15, 23, 42, 0.2);
    }

    .path-nav::-webkit-scrollbar-thumb {
        background: var(--primary-color);
        border-radius: 2px;
    }

    .path-separator {
        color: var(--text-secondary);
        margin: 0 0.5rem;
    }

    .action-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .search-container {
        position: relative;
    }

    .search-icon {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-secondary);
    }

    .search-box {
        background: rgba(15, 23, 42, 0.4);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 0.5rem 1rem 0.5rem 35px;
        color: var(--text-primary);
        width: 300px;
        transition: all 0.3s ease;
    }

    .search-box:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.1);
        width: 350px;
    }

    .storage-info {
        background: rgba(15, 23, 42, 0.4);
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 2rem;
    }

    .folder-grid, .file-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .folder-item, .file-item {
        background: rgba(15, 23, 42, 0.4);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        padding: 1rem;
        transition: all 0.3s ease;
        cursor: pointer;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .folder-item:hover, .file-item:hover {
        transform: translateY(-3px);
        border-color: var(--primary-color);
        background: rgba(15, 23, 42, 0.6);
    }

    .item-actions {
        position: absolute;
        right: 10px;
        top: 10px;
        display: none;
        gap: 8px;
        background: rgba(15, 23, 42, 0.8);
        padding: 4px;
        border-radius: 20px;
        backdrop-filter: blur(4px);
    }

    .folder-item:hover .item-actions,
    .file-item:hover .item-actions {
        display: flex;
        animation: fadeIn 0.2s ease-in-out;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-5px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .action-btn {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: rgba(30, 41, 59, 0.95);
        border: 1px solid var(--border-color);
        color: var(--text-primary);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        margin: 0 2px;
    }

    .action-btn:hover {
        transform: translateY(-2px);
    }

    .action-btn.download:hover {
        background: #3b82f6;
        color: white;
        border-color: #3b82f6;
    }

    .action-btn.delete:hover {
        background: #ef4444;
        color: white;
        border-color: #ef4444;
    }

    .folder-icon, .file-icon {
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2rem;
        margin-bottom: 1rem;
    }

    .item-name {
        color: var(--text-primary);
        margin: 0.5rem 0;
        word-break: break-word;
    }

    .item-meta {
        color: var(--text-secondary);
        font-size: 0.85rem;
    }

    .empty-state {
        text-align: center;
        padding: 3rem;
        color: var(--text-secondary);
    }

    .empty-state i {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .dropzone {
        border: 2px dashed var(--border-color);
        border-radius: 16px;
        padding: 2rem;
        text-align: center;
        color: var(--text-secondary);
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .dropzone:hover, .dropzone.dragover {
        border-color: var(--primary-color);
        background: rgba(99, 102, 241, 0.1);
    }

    .dropzone i {
        font-size: 3rem;
        margin-bottom: 1rem;
    }
</style>

<div class="file-manager">
    <div class="path-nav">
        <a href="/File/Manager" class="nav-link">
            <i class="fas fa-home"></i>
        </a>
        @if (Model.CurrentFolderId.HasValue)
        {
            <span class="path-separator">/</span>
            @foreach (var part in Model.CurrentFolderPath.Split('/').Where(p => !string.IsNullOrEmpty(p)))
            {
                <a href="#" class="nav-link">@part</a>
                <span class="path-separator">/</span>
            }
        }
    </div>

    <div class="action-bar">
        <div class="action-buttons">
            <button class="btn btn-primary me-2" onclick="showCreateFolderModal()">
                <i class="fas fa-folder-plus"></i> New Folder
            </button>
            <button class="btn btn-primary" onclick="document.getElementById('fileInput').click()">
                <i class="fas fa-upload"></i> Upload Files
            </button>
            <input type="file" id="fileInput" multiple style="display: none" onchange="handleFileSelect(event)" />
        </div>
        <div class="search-container">
            <i class="fas fa-search search-icon"></i>
            <input type="text" class="search-box" placeholder="Search files..." onkeyup="searchFiles(this.value)" />
        </div>
    </div>

    <div class="storage-info">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <div>Storage Used</div>
            <div>@Model.StorageUsed.ToString("F2") MB of @Model.StorageLimit MB</div>
        </div>
        <div class="progress">
            <div class="progress-bar" role="progressbar" 
                 style="width: @((Model.StorageUsed / Model.StorageLimit * 100).ToString("F1"))%"></div>
        </div>
    </div>

    @if (Model.Folders.Any())
    {
        <h5 class="mb-3"><i class="fas fa-folder"></i> Folders</h5>
        <div class="folder-grid">
            @foreach (var folder in Model.Folders)
                {
                    <div class="folder-item position-relative" onclick="navigateToFolder(@folder.Id)">
                    <div class="folder-icon">
                        <i class="fas fa-folder"></i>
                    </div>
                    <div class="item-name">@folder.FolderName</div>
                    <div class="item-meta">Created @folder.CreatedOn.ToString("MMM dd, yyyy")</div>
                    <div class="item-actions" onclick="event.stopPropagation()">
                        <button class="action-btn" onclick="window.open('/File/DownloadFolder/@folder.Id', '_blank')" title="Download Folder">
                            <i class="fas fa-download"></i>
                        </button>
                        <button class="action-btn delete" onclick="deleteFolder(@folder.Id)" title="Delete Folder">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            }
        </div>
    }

    @if (Model.Files.Any())
    {
        <h5 class="mb-3"><i class="fas fa-file"></i> Files</h5>
        <div class="file-grid">
            @foreach (var file in Model.Files)
            {
                <div class="file-item position-relative">
                    <div class="file-icon">
                        @{
                            var icon = file.FileType switch
                            {
                                ".pdf" => "fa-file-pdf",
                                ".doc" or ".docx" => "fa-file-word",
                                ".xls" or ".xlsx" => "fa-file-excel",
                                ".jpg" or ".jpeg" or ".png" or ".gif" => "fa-file-image",
                                ".zip" or ".rar" => "fa-file-archive",
                                ".mp4" or ".avi" or ".mov" => "fa-file-video",
                                ".mp3" or ".wav" => "fa-file-audio",
                                _ => "fa-file"
                            };
                        }
                        <i class="fas @icon"></i>
                    </div>
                    <div class="item-name">@file.FileName</div>
                    <div class="item-meta">
                        @((file.FileSize / 1024.0 / 1024.0).ToString("F2")) MB
                    </div>
                    <div class="item-actions">
                        <button class="action-btn download" onclick="window.open('/File/Download/@file.Id', '_blank')" title="Download File">
                            <i class="fas fa-download"></i>
                        </button>
                        <button class="action-btn delete" onclick="deleteFile(@file.Id, event)" title="Delete File">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            }
        </div>
    }

    @if (!Model.Files.Any() && !Model.Folders.Any())
    {
        <div class="empty-state">
            <i class="fas fa-folder-open"></i>
            <p>This folder is empty</p>
            <button class="btn btn-primary mt-2" onclick="document.getElementById('fileInput').click()">
                <i class="fas fa-upload"></i> Upload Files
            </button>
        </div>
    }
</div>

<!-- Create Folder Modal -->
<div class="modal fade" id="createFolderModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content" style="background: rgba(30, 41, 59, 0.95); border: 1px solid var(--border-color);">
            <div class="modal-header border-bottom-0">
                <h5 class="modal-title">Create New Folder</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="text" id="folderName" class="form-control" 
                       style="background: rgba(15, 23, 42, 0.4); border-color: var(--border-color); color: var(--text-primary);" 
                       placeholder="Enter folder name" />
            </div>
            <div class="modal-footer border-top-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createFolder()">Create</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function showCreateFolderModal() {
            var modal = new bootstrap.Modal(document.getElementById('createFolderModal'));
            modal.show();
        }

        async function createFolder() {
            const folderName = document.getElementById('folderName').value;
            if (!folderName) {
                alert('Please enter a folder name');
                return;
            }

            try {
                const response = await fetch('/File/CreateFolder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        folderName,
                        parentFolderId: @(Model.CurrentFolderId?.ToString() ?? "null")
                    })
                });

                const result = await response.json();
                if (result.success) {
                    location.reload();
                } else {
                    alert(result.message);
                }
            } catch (error) {
                alert('Error creating folder');
            }
        }

        async function handleFileSelect(event) {
            const files = event.target.files;
            if (!files.length) return;

            for (const file of files) {
                const formData = new FormData();
                formData.append('file', file);
                formData.append('folderId', @(Model.CurrentFolderId?.ToString() ?? "null"));

                try {
                    const response = await fetch('/File/Upload', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();
                    if (!result.success) {
                        alert(result.message);
                    }
                } catch (error) {
                    alert('Error uploading file');
                }
            }

            location.reload();
        }

        function navigateToFolder(folderId) {
            window.location.href = `/File/Manager?folderId=${folderId}`;
        }

        // Add toast container for notifications
        if (!document.getElementById('toastContainer')) {
            const toastContainer = document.createElement('div');
            toastContainer.id = 'toastContainer';
            toastContainer.style.position = 'fixed';
            toastContainer.style.bottom = '20px';
            toastContainer.style.right = '20px';
            toastContainer.style.zIndex = '9999';
            document.body.appendChild(toastContainer);
        }

        // Show notification toast
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.style.minWidth = '250px';
            toast.style.margin = '10px';
            toast.style.padding = '15px 20px';
            toast.style.borderRadius = '4px';
            toast.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
            toast.style.backgroundColor = type === 'error' ? '#ef4444' : '#10b981';
            toast.style.color = 'white';
            toast.style.transition = 'all 0.3s ease';
            toast.textContent = message;

            const container = document.getElementById('toastContainer');
            container.appendChild(toast);

            setTimeout(() => {
                toast.style.opacity = '0';
                setTimeout(() => {
                    container.removeChild(toast);
                }, 300);
            }, 3000);
        }

        async function deleteFolder(folderId) {
            if (!confirm('Are you sure you want to delete this folder and all its contents?')) return;

            try {
                const button = event.target.closest('.action-btn');
                const originalContent = button.innerHTML;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                button.disabled = true;

                const response = await fetch('/File/DeleteFolder', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ folderId })
                });
                const result = await response.json();
                
                if (result.success) {
                    showToast('Folder deleted successfully');
                    location.reload();
                } else {
                    button.innerHTML = originalContent;
                    button.disabled = false;
                    showToast(result.message || 'Error deleting folder', 'error');
                }
            } catch (err) {
                button.innerHTML = originalContent;
                button.disabled = false;
                showToast('Error deleting folder', 'error');
            }
        }

        let searchTimeout;
        async function searchFiles(query) {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(async () => {
                try {
                    const response = await fetch(`/File/Search?query=${encodeURIComponent(query)}`);
                    const result = await response.json();
                    if (result.success) {
                        // Update UI with search results
                        const fileGrid = document.querySelector('.file-grid');
                        if (!fileGrid) return;

                        fileGrid.innerHTML = result.files.map(file => `
                            <div class="file-item" onclick="showFileActions(${file.id})">
                                <div class="file-icon">
                                    <i class="fas fa-file"></i>
                                </div>
                                <div class="item-name">${file.fileName}</div>
                                <div class="item-meta">
                                    ${(file.fileSize / 1024 / 1024).toFixed(2)} MB
                                </div>
                            </div>
                        `).join('');
                    }
                } catch (error) {
                    console.error('Error searching files:', error);
                }
            }, 300);
        }

        async function deleteFile(fileId, event) {
            if (!confirm('Are you sure you want to delete this file?')) return;

            try {
                // Get the button that was clicked
                const button = event.currentTarget;
                const originalContent = button.innerHTML;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                button.disabled = true;

                const response = await fetch('/File/Delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ fileId })
                });

                const result = await response.json();
                if (result.success) {
                    showToast('File deleted successfully');
                    location.reload();
                } else {
                    if (button) { button.innerHTML = originalContent; button.disabled = false; }
                    const msg = result.message || 'Error deleting file';
                    // show detailed debug info if available (temporary)
                    if (result.detail) {
                        console.error('Delete error detail:', result.detail);
                        // show a short toast and log full detail to console
                        showToast(msg + ' (see console for details)', 'error');
                    } else {
                        showToast(msg, 'error');
                    }
                }
            } catch (error) {
                if (button) { button.innerHTML = originalContent; button.disabled = false; }
                console.error('Delete request failed:', error);
                showToast('Error deleting file (network)', 'error');
            }
        }
    </script>
}